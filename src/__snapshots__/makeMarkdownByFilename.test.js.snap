// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`makeMarkdownByFilename integration should support appended schemas 1`] = `
Object {
  "extendedFromBase": "# Extends from Base

## base

> \`boolean\` | Optional




## extended

> \`boolean\` | Optional



",
}
`;

exports[`makeMarkdownByFilename unit should mark required fields 1`] = `
Object {
  "test": "# Test

## foo

> \`number\` | Required



",
}
`;

exports[`makeMarkdownByFilename unit should support blacklisting invalid values 1`] = `
Object {
  "test": "# Test

## foo

> \`string\` | Optional





Blacklist: \`invalid1\`, \`invalid2\`
",
}
`;

exports[`makeMarkdownByFilename unit should support default meta tags 1`] = `
Object {
  "test": "# Test

## foo

> \`number\` | Optional | Default: \`1\`



",
}
`;

exports[`makeMarkdownByFilename unit should support descriptions 1`] = `
Object {
  "test": "# Test

## foo

> \`number\` | Optional


This is a description.
",
}
`;

exports[`makeMarkdownByFilename unit should support list of single primitive type 1`] = `
Object {
  "test": "# Test

## stringList

> \`array\`: \`string\` | Optional



",
}
`;

exports[`makeMarkdownByFilename unit should support list of various primitive types 1`] = `
Object {
  "test": "# Test

## stringList

> \`array\`: \`string\`,\`number\`,\`boolean\` | Optional



",
}
`;

exports[`makeMarkdownByFilename unit should support min and max 1`] = `
Object {
  "test": "# Test

## foo

> \`number\` | Optional | min: \`0\` | max: \`5\`



",
}
`;

exports[`makeMarkdownByFilename unit should support nested list of single schema/object type 1`] = `
Object {
  "listItem": "[Test](./test.md)
# List Item

## listItemKey

> \`string\` | Optional



",
  "test": "# Test

## stringList

> \`array\`: [List Item](./listItem.md) | Optional



",
}
`;

exports[`makeMarkdownByFilename unit should support nested schemas/objects 1`] = `
Object {
  "child": "[Parent](./parent.md)
# Child

## foo

> \`number\` | Optional



",
  "parent": "# Parent

## [foo](./child.md)

> \`object\` | Optional



",
}
`;

exports[`makeMarkdownByFilename unit should support primitive type 1`] = `
Object {
  "test": "# Test

## foo

> \`number\` | Optional




## bar

> \`string\` | Optional




## baz

> \`boolean\` | Optional



",
}
`;

exports[`makeMarkdownByFilename unit should support whitelisting valid values 1`] = `
Object {
  "test": "# Test

## foo

> \`string\` | Optional





Whitelist: \`valid1\`, \`valid2\`
",
}
`;
